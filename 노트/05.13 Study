ⓐ API(resolvers, Model) ⓕ Function ⓜ Model ⓡ resolvers   ⓤ Util File 
오늘 내용 총 정리
- 1. Prisma와 Grraphql은 서로 호환성이 달라서, 새로파일을 생성해줘야 한다.
    ⓜ models.graphql

- 2. ⓐ createAccount를 통해서 사용자 생성 관련 API를 먼저 만들어준다. 
    - 👍 주의 사항 1 👍 : ⓜ datamodel.prisma, models.graphql의 loginSecret의 type에서 required인 !를 빼줘야한다.
    - 👍 주의 사항 2 👍 : model에서 @unique 설정 해준 것만이, where의 조건으로 사용 가능 하다.
    - 👍 주의 사항 3 👍 : required가 정의 되지 않은 경우 null이나 undefined가 들어오는 것을 막기 위해 resolver에 빈 문자열을 넣어놓는다. 
        🎨 완성!

- 3. ⓤ Utils.js의 ⓕ generateSecret는 words.js의 단어 배열의 랜덤한 배열값의 쌍으로 랜덤한 secret key를 생성해준다.
    - 😲 꿀팁 ! 😲 :  alt + shift + Drag&Drop으로 전 단어를 블록 잡고, 한번에 ""와 ,를 붙여준다.

- 4. 사용자별 Secret Code를 할당해줄 수 있게 ⓐ requsetSecret를 정의 해줍니다.
    - ▶️ ⓜ requestSecret Model에 [3] 에서 만든 ⓕ generateSecret 함수를 할당해서 loginSecret값을 만들어준다.

- 5. 사용자에게 이메일로 secret Code 발송을 위해, 모듈을 설치해줍니다.( ▶ nodemailer, nodemailer-sendgrid-transport)  
    - 🏀 utils.js 파일에 설치한 모듈을 import 해줍니다. 그리고 두가지의 함수를 생성 해줍니다.
        (▶ sendMail(메일 전송 계정 설정 및 전송 ), sendSecretMail(메일 내용 설정 및 sendMail에 인자 값 전달) ◀)

- 6. [4] 번에서 설명드린 ⓡ requestSecret에는 ⓕ sendSecretMail을 통해 이메일을 보내주고, updateUser로 해당 User에 loginSecret값을 변경해준다. 그리고 True반환
    6.1 - 에러시에 console에러 출력 및 false를 return 해준다.

- 7. 이제 secret 코드 값과 update된 user의 login secret코드를 맞춰보는 ⓐ confirmSecret 를 생성한다.
 - confirmSecret을 통해 넘어온 secret코드가 저장된 secret과 동일하다면 토큰을 발행해주는 resolvers를 짠다.
    - 🍺 토큰을 발행하기 위해서는 passport 모듈과 passport-jwt 모듈이 필요하다.
    - passport-jwt의 readme를 보고 따라서 작성을 해준다. 💖 secret은 passport 정보를 암호화해서 저장하기 위한 것.
    - .env 파일에 JWT_SECRET을 작성해준다.

- 8. utils.js 파일에 jsonwebtoken 모듈을 설치하고 import 해준다.
    - ⓕ generateToken 함수 생성 그 안에 설치한 모듈을 이용해서 암호화된 토큰을 생성해준다.

- 9. confirmSecret resolver안에 토큰 발행 함수 부분에 generateToken을 넣어서 리턴해준다.





 {"Authorization": "Bearer [Token]"}
